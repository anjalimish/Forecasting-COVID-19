# -*- coding: utf-8 -*-
"""Timelineseries_India.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/157iJsTIgrqaOgX5YwyZvoKGBwUm4vxlh
"""

import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px

confirmed_cases_file_link="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
death_cases_file_link="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
recovered_cases_file_link="https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv"
country_cases_file_link= "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv"
confirmed_df = pd.read_csv(confirmed_cases_file_link)
print(confirmed_df.shape)
deaths_df = pd.read_csv(death_cases_file_link)
print(deaths_df.shape)
recovered_df = pd.read_csv(recovered_cases_file_link)
print(recovered_df.shape)
cases_country_df = pd.read_csv(country_cases_file_link)
print(cases_country_df.shape)
 

confirmed_df = confirmed_df.replace(np.nan,'',regex=True)
deaths_df = deaths_df.replace(np.nan,'',regex=True)
recovered_df = recovered_df.replace(np.nan,'',regex=True)

#confirmed_df.columns
#confirmed_df[confirmed_df["Country/Region"] == "India"]
#confirmed_df["Country/Region"].nunique()


#global case count
global_data = cases_country_df.copy().drop(['Lat', 'Long_', 'Country_Region','Last_Update'],axis=1)
global_summary = pd.DataFrame(global_data.sum()).transpose()
global_summary.style.format("{:,.0f}")

confirmed_ts = confirmed_df.copy().drop(['Lat', 'Long', 'Country/Region','Province/State'],axis=1).reset_index(drop=True).sum()
confirmed_ts_summary = confirmed_ts.sum()

#fig_1 = go.Figure(data=go.Scatter(x=confirmed_ts_summary.index, y=confirmed_ts_summary.values, mode ='lines+markers'))
#fig_1.update_layout(title='Total confirmed cases globally',yaxis_title ='confirmed cases',xaxis_tickangle=315)
#fig_1.show()

color_arr = px.colors.qualitative.Dark24
def draw_plot(ts_array, ts_label, title,colors,mode_size,line_size,x_axis_title,y_axis_title,tickangle = 0,yaxis_type='',additional_annotations=[]):
  fig = go.Figure()
  for index, ts in enumerate(ts_array):
    fig.add_trace(go.Scatter(x= ts.index,
                           y= ts.values,
                           name= ts_label[index],
                           line=dict(color=colors[index], width=line_size[index]),connectgaps=True))
  x_axis_dict = dict(showline=True,
                   showgrid=True,
                   showticklabels=True,
                   linecolor= 'rgb(204, 204, 204)',
                   linewidth=2,
                   ticks = 'outside',
                   tickfont = dict(family='Arial',size=12,color='rgb(82,82,82)'))
  if x_axis_title:
    x_axis_dict['title'] =x_axis_title
  
  if tickangle > 0:
    x_axis_dict['tickangle'] =tickangle
  y_axis_dict = dict(showline=True,
                   showgrid=True,
                   showticklabels=True,
                   linecolor= 'rgb(204, 204, 204)',
                   linewidth=2)  
  if yaxis_type != '':
     y_axis_dict['type'] = yaxis_type
  if y_axis_title:
    y_axis_dict['title'] =y_axis_title
   
  fig.update_layout(xaxis = x_axis_dict,
                     yaxis = y_axis_dict,
                     
                     margin =dict(autoexpand =True,l= 100,r= 20,t=110),
                     showlegend=True)
  

  annotations = []
  annotations.append(dict(xref='paper',yref='paper',x=0.0,y=1.05,xanchor='left',yanchor='bottom',
                          text=title,
                          font=dict(family='Arial',size=16,color='rgb(37,37,37)'),showarrow=False))
  
  if len(additional_annotations) > 0:
    annotations.append(additional_annotations)

  fig.update_layout(annotations=annotations)

  return fig 

#India
confirmed_India_ts = confirmed_df[confirmed_df["Country/Region"] == "India"]
confirmed_India_ts = confirmed_India_ts.drop(['Lat', 'Long', 'Country/Region','Province/State'],axis=1).reset_index(drop=True).sum()

deaths_India_ts = deaths_df[deaths_df["Country/Region"] == "India"]
deaths_India_ts = deaths_India_ts.drop(['Lat', 'Long', 'Country/Region','Province/State'],axis=1).reset_index(drop=True).sum()

recovered_India_ts = recovered_df[recovered_df["Country/Region"] == "India"]
recovered_India_ts = recovered_India_ts.drop(['Lat', 'Long', 'Country/Region','Province/State'],axis=1).reset_index(drop=True).sum()


active_India_ts = pd.Series(
    data = np.array(
        [x1 - x2 - x3 for (x1 , x2 , x3) in zip(
            confirmed_India_ts.values,deaths_India_ts.values,recovered_India_ts.values)
        ]
    ),
    

index= confirmed_India_ts.index
)
    


ts_array = [confirmed_India_ts,active_India_ts,recovered_India_ts,deaths_India_ts]
labels =['Confirmed','Active','Recovered','Deaths']
colors =[color_arr[5],color_arr[0],color_arr[2],color_arr[3]]
mode_size = [8,8,12,8]
line_size = [2,2,4,2]

fig_3 =draw_plot(ts_array= ts_array,
                 ts_label =labels,
                 title ="COVID-19 case Trend in  India",
                 colors= colors, mode_size =mode_size,
                 line_size=line_size,
                 x_axis_title ="Date",
                 y_axis_title ="case count",
                 tickangle = 315,
                 yaxis_type ='',additional_annotations = [])

fig_3.show()


fig_4 =draw_plot(ts_array= ts_array,
                 ts_label =labels,
                 title ="Semi-Log Plot of COVID-19 Transmission Timeline in INDIA - 03/022020 Onwards",
                 colors= colors, mode_size =mode_size,
                 line_size=line_size,
                 x_axis_title ="Date-->",
                 y_axis_title ="Case Count(Log Scale)",
                 tickangle = 315,
                 yaxis_type ='log',additional_annotations = [])

fig_4.show()